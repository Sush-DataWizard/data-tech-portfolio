
https://github.com/liquidslr/leetcode-company-wise-problems


ðŸ“Œ A. Arrays & Strings (mustâ€‘know basics for any coding round)

âœ… Two Sum
âœ… Best Time to Buy and Sell Stock
âœ… Maximum Subarray (Kadaneâ€™s Algorithm)
âœ… Merge Intervals
âœ… Container With Most Water
âœ… Longest Substring Without Repeating Characters
âœ… Longest Palindromic Substring
âœ… Group Anagrams
âœ… Find All Anagrams in a String
âœ… Subarray Sum Equals K

ðŸ“Œ B. Hashing & Searching

âœ… Top K Frequent Elements
âœ… Two Sum II - Input Array Is Sorted
âœ… 3Sum / 4Sum
âœ… Find Duplicate Number
âœ… Longest Consecutive Sequence
âœ… First Unique Character in a String

ðŸ“Œ C. Linked List (pointer logic often tested)

âœ… Reverse Linked List (iterative & recursive)
âœ… Detect Cycle in a Linked List (Floyds Algorithm)
âœ… Merge Two Sorted Lists
âœ… Add Two Numbers (Linked List representation)

ðŸ“Œ D. Trees & Graphs (important for data pipelines, traversal logic)

âœ… Binary Tree Level Order Traversal
âœ… Lowest Common Ancestor of a Binary Tree
âœ… Validate Binary Search Tree
âœ… Serialize and Deserialize Binary Tree
âœ… Number of Islands (Graph BFS/DFS)
âœ… Clone Graph
âœ… Topological Sort (Kahn's Algorithm) - often used in DAG processing

ðŸ“Œ E. Dynamic Programming (for advanced problemâ€‘solving)

âœ… Coin Change (minimum coins)
âœ… Longest Increasing Subsequence
âœ… Maximum Product Subarray
âœ… Unique Paths (with obstacles variant)
âœ… Word Break Problem
âœ… Edit Distance

ðŸ“Œ F. Big Dataâ€“Relevant Python Practice
These wonâ€™t be direct LeetCode problems but test your ability to handle data:

âœ… Parse huge log files and count events (simulate map-reduce in Python)
âœ… Implement a moving average over a streaming dataset
âœ… Given large CSVs, join two datasets in memory efficiently
âœ… Implement a Bloom Filter or LRU Cache (to show understanding of memory optimization)
âœ… Write a Python function to read data in chunks (using generators/iterators)
âœ… Sort a large dataset that doesnâ€™t fit in memory (external sort concept)

ðŸ“Œ G. System Design / Data Engineeringâ€“oriented
(Usually discussed after coding round â€” but prepare logic too)

âœ… Design a distributed log processing system (like Kafka consumers)
âœ… Design a data pipeline for real-time analytics
âœ… How would you deduplicate massive data sets?
âœ… How would you implement a fault-tolerant ETL job?