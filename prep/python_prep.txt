
https://github.com/liquidslr/leetcode-company-wise-problems


📌 A. Arrays & Strings (must‑know basics for any coding round)

✅ Two Sum
✅ Best Time to Buy and Sell Stock
✅ Maximum Subarray (Kadane’s Algorithm)
✅ Merge Intervals
✅ Container With Most Water
✅ Longest Substring Without Repeating Characters
✅ Longest Palindromic Substring
✅ Group Anagrams
✅ Find All Anagrams in a String
✅ Subarray Sum Equals K

📌 B. Hashing & Searching

✅ Top K Frequent Elements
✅ Two Sum II - Input Array Is Sorted
✅ 3Sum / 4Sum
✅ Find Duplicate Number
✅ Longest Consecutive Sequence
✅ First Unique Character in a String

📌 C. Linked List (pointer logic often tested)

✅ Reverse Linked List (iterative & recursive)
✅ Detect Cycle in a Linked List (Floyds Algorithm)
✅ Merge Two Sorted Lists
✅ Add Two Numbers (Linked List representation)

📌 D. Trees & Graphs (important for data pipelines, traversal logic)

✅ Binary Tree Level Order Traversal
✅ Lowest Common Ancestor of a Binary Tree
✅ Validate Binary Search Tree
✅ Serialize and Deserialize Binary Tree
✅ Number of Islands (Graph BFS/DFS)
✅ Clone Graph
✅ Topological Sort (Kahn's Algorithm) - often used in DAG processing

📌 E. Dynamic Programming (for advanced problem‑solving)

✅ Coin Change (minimum coins)
✅ Longest Increasing Subsequence
✅ Maximum Product Subarray
✅ Unique Paths (with obstacles variant)
✅ Word Break Problem
✅ Edit Distance

📌 F. Big Data–Relevant Python Practice
These won’t be direct LeetCode problems but test your ability to handle data:

✅ Parse huge log files and count events (simulate map-reduce in Python)
✅ Implement a moving average over a streaming dataset
✅ Given large CSVs, join two datasets in memory efficiently
✅ Implement a Bloom Filter or LRU Cache (to show understanding of memory optimization)
✅ Write a Python function to read data in chunks (using generators/iterators)
✅ Sort a large dataset that doesn’t fit in memory (external sort concept)

📌 G. System Design / Data Engineering–oriented
(Usually discussed after coding round — but prepare logic too)

✅ Design a distributed log processing system (like Kafka consumers)
✅ Design a data pipeline for real-time analytics
✅ How would you deduplicate massive data sets?
✅ How would you implement a fault-tolerant ETL job?


| **Pattern**                   | **Real-Life Analogy**                             | **Solves**                                                  |
| ----------------------------- | ------------------------------------------------- | ----------------------------------------------------------- |
| Sliding Window                | “Peeking through a moving window”                 | Longest Substring, Max Sum Subarray, Anagrams               |
| Two Pointers                  | “2 fingers walking toward each other”             | 2Sum, Reverse Words, Sorted Square, Palindrome Check        |
| Fast & Slow Pointers          | “Tom & Jerry: one fast, one slow” 🐢🐱            | Linked List Cycle, Happy Number                             |
| Binary Search                 | “Guess the number in 7 tries or less”             | Rotated Array, First/Last Position, Koko Eating Bananas     |
| DFS / BFS                     | “DFS: Go deep. BFS: Go wide.”                     | Graph Traversals, Flood Fill, Word Ladder, Shortest Path    |
| Backtracking                  | “Trying all outfits before choosing one” 👗       | Sudoku, N-Queens, Word Search, Permutations                 |
| Dynamic Programming           | “Why re-solve what you’ve already solved?”        | Knapsack, House Robber, LIS, Edit Distance                  |
| Greedy                        | “Always pick what seems best right now”           | Activity Selection, Jump Game, Gas Station                  |
| Union-Find (DSU)              | “Friend circles detection” 🧑‍🤝‍🧑               | Number of Provinces, Kruskal’s MST, Connected Components    |
| Topological Sort              | “Finish A before B” 📦                            | Course Schedule, Task Scheduling                            |
| Prefix Sum / Difference Array | “Running totals like bank statements” 💸          | Range Sum, Subarray Sum Equal K, Rainwater Trapping         |
| Monotonic Stack / Queue       | “Stacking plates or tallest first 🏙️”            | Next Greater Element, Daily Temperatures, Largest Rectangle |
| Bit Manipulation              | “Flip switches to solve puzzles ⚪”                | Single Number, Count Bits, Subsets, XOR problems            |
| Trie (Prefix Tree)            | “Autocomplete dictionary” 🍵                      | Word Search, StartsWith, Replace Words                      |
| Heap / Priority Queue         | “Serve most urgent first” 🛎️                     | Kth Largest, Top K Elements, Merge K Lists                  |
| Graph (Adjacency List/Matrix) | “Follow paths on a map” 🗺️                       | Shortest Path, Cycles, Connected Components                 |
| Recursion                     | “Function calling itself — like Russian dolls 🪆” | Tree Problems, Factorial, Subsets, Merge Sort               |
| Segment Tree / Fenwick Tree   | “Smart range queries” 📊                          | Range Sum/Min/Max, Updates on Array                         |
| Matrix Traversal              | “Walk in all directions 🧭”                       | Spiral Order, Island Count, Diagonal Traversals             |
| Hashing / HashMap             | “Lookup table memory” 🧠                          | 2Sum, Group Anagrams, Frequency Counts                      |
